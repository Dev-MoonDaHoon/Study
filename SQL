/*********************11장 서브쿼리 실습*********************/
#1번. 서브쿼리를 사용하여 10 또는 그 이상의 가격으로 제품을 구매한 고객 목록을 반환하라. OrderItems 테이블에서 조건에 맞는 주문 번호(order_num)를 가져온 다음, Orders 테이블에서 주문번호와 일치하는 주문에 대한 고객 ID(cust_id)를 검색한다.
  SELECT cust_id 
    FROM Orders 
   WHERE order_num IN (
      SELECT order_num 
        FROM OrderItems 
       WHERE item_price >= 10
   );

#2번. BR01 제품이 주문된 날짜를 알아야 한다. 서브쿼리를 이용하여 OrderItems 에서 prod_i가 BR01인 주문 항목을 확인한다. 그리고 Orders 테이블에서 각각의 고객 ID(cust_id)와 주문 날짜(order_date)를 가져온 다음 결과를 주문 날짜로 정렬하는 SQL문을 작성하라. 
  SELECT cust_id, order_date 
    FROM Orders WHERE order_num IN (
      SELECT order_num 
        FROM OrderItems 
       WHERE prod_id = 'BR01'
   ) 
   ORDER BY order_date;

#3번. 2번을 수정하여 prod_id가 BR01을 구매한 모든 고객의 이메일 주소(Customers 테이블에서 cust_email)를 가져오자. 가장 안쪽에 있는 쿼리는 OrderItems에서 order_num을 반환하고 중간에 있는 쿼리는 Customer 테이블에서 cust_id를 반환하는 SELECT 문이 포함된다. 
  SELECT cust_email 
    FROM Customers 
   WHERE cust_id IN (
      SELECT cust_id 
        FROM Orders 
       WHERE order_num IN (
          SELECT order_num 
            FROM OrderItems 
           WHERE prod_id = 'BR01'
      ) 
   );


#4번. 고객 ID목록과 각각의 고객이 주문한 수량이 필요하다. 고객 ID(Orders 테이블에서 cust_id)와 서브쿼리를 사용하여 각각의 고객에 대한 총주문량을 total_ordered로 가져오는 SQL문을 작성하라. 그 결과를 가장 큰 수부터 적은 순서대로 정렬하라. 이전에는 주문 합계를 계산하기 위해 SUM()을 썼다는 점을 기억하자.
  SELECT cust_id, SUM(total_ordered) 
    FROM (
      SELECT (
        SELECT cust_id 
          FROM Orders 
         WHERE Orders.order_num = OrderItems.order_num
        ) AS cust_id,SUM(quantity) AS total_ordered 
        FROM OrderItems GROUP BY order_num
      ) A 
   GROUP BY cust_id 
   ORDER BY SUM(total_ordered) desc;

#5번. Products 테이블에서 모든 제품명(prod_name)과 quant_sold를 가져오는 SQL문을 작성하라. 여기서 quant_sol는 판매된 항목의 총수량이 담긴 계산 필드다(OrderItems 테이블에서 서브쿼리와 SUM(quantity)를 이용해 검색). 
  SELECT prod_name, (
      SELECT SUM(quantity) 
        FROM OrderItems 
       WHERE prod_id = Products.prod_id
  ) 
    FROM Products;
/*********************10장 GROUPING 실습*********************/
#TIP GROUP BY 절에는 별칭은 사용할 수 없고 가변형 길이의 데이터 형은 사용할 수 없다
#TIP 그룹 함수 명령문을 제외하고 SELECT 절에 있는 모든 열은 GROUP BY 절에 존재해야 한다
#TIP 그룹핑하는 열의 행에 NULL값이 있다면, NULL도 그룹으로 가져온다. 여러 행이 NULL값을 가진다면, 모두 함께 그룹핑된다.
#TIP WHERE은 그룹핑 하기 전에 수행되고 HAVING은 그룹핑 후에 수행된다

#1번. 
  SELECT order_num, COUNT(order_num) AS order_lines 
    FROM OrderItems 
   GROUP BY order_num  
   ORDER BY order_lines;
   
#2번.
  SELECT vend_id, MIN(prod_price) AS cheapest_item 
    FROM Products 
   GROUP BY vend_id  
   ORDER BY cheapest_item;

#3번.
  SELECT order_num, SUM(quantity) 
    FROM OrderItems 
   GROUP BY order_num 
  HAVING SUM(quantity) >= 100;
  
#4번.
  SELECT order_num, SUM(quantity*item_price) 
    FROM OrderItems 
   GROUP BY order_num 
  HAVING SUM(quantity*item_price) >= 1000;
/*********************9장 함수 실습*********************/ 
#TIP GROUP 함수는 NULL값만 가진 데이터는 무시한다 EX) COUNT(*) 전체 조회, COUNT(CUST_NAME) - CUST_NAME이 NULL이면 COUNT X  

#1번. 
  SELECT SUM(quantity) AS ALL_SALES 
    FROM OrderItems;

   
#2번.
  SELECT SUM(quantity) 
    FROM OrderItems 
   WHERE prod_id = 'BR01';

#3번.
  SELECT MAX(item_price) AS max_price 
    FROM OrderItems 
   WHERE item_price <= 10;


/*********************8장 함수 실습*********************/ 
#1번. 
  SELECT cust_id, cust_name, CONCAT(LEFT(cust_name ,2),LEFT(cust_city ,3)) AS user_login 
    FROM Customers;

   
#2번.
  SELECT order_num, order_date 
    FROM Orders 
   WHERE DATE_FORMAT(order_date,'%Y%m') = '202001' 
   ORDER BY order_num, order_date; 
    

/*********************7장 계산필드 실습*********************/ ORACLE ||, MYSQL CONCAT()
#1번. 
  SELECT vend_id, vend_name AS vname, vend_address AS vadress, vend_city AS vcity 
    FROM Vendors 
   ORDER BY vname;
   
#2번.
  SELECT prod_id, prod_price, prod_price*0.9 AS sale_price 
    FROM Products 
    
/*********************6장 LIKE 실습*********************/ TIP. LIKE ('%') 검색은 NULL을 가져오지 않는다 
#1번. 
  SELECT prod_name, prod_desc 
    FROM Products 
   WHERE prod_desc LIKE '%toy%';

#2번.
  SELECT prod_name, prod_desc 
    FROM Products 
   WHERE prod_desc NOT LIKE '%toy%' 
   ORDER BY prod_name 

#3번. 
  SELECT prod_name, prod_desc 
    FROM Products 
   WHERE prod_desc LIKE ('%toy%') AND prod_desc LIKE ('%carrots%')
   
#4번.
  SELECT prod_name, prod_desc 
    FROM Products 
   WHERE prod_desc LIKE ('%toy%carrots%');

##/*********************5장 WHERE(in, not) 실습*********************/
#1번.
  SELECT vend_name 
    FROM Vendors 
   WHERE vend_country = 'USA' AND vend_state = 'CA';

#2번. 
  SELECT prod_id, order_num, prod_id, quantity  
    FROM OrderItems 
   WHERE prod_id IN ('BR01','BR02','BR03') AND quantity >= 100;

##/*********************4장 WHERE 실습*********************/
#1번.
  SELECT prod_name 
    FROM Products 
   WHERE prod_price = '9.49';
  
#2번. 
  SELECT prod_id ,prod_name 
    FROM Products 
   WHERE prod_price >= 9;
   
#3번.
  SELECT DISTINCT order_num  
    FROM OrderItems 
   WHERE quantity >=100
   
4번.
  SELECT prod_name, prod_price  
    FROM Products 
   WHERE prod_price BETWEEN 3 AND 6 
   ORDER BY prod_price ;

##/*********************3장 ORDER BY 실습*********************/
#1번. 
  SELECT cust_name 
    FROM Customers 
   ORDER BY cust_name desc;

#2번. 
  SELECT cust_id, order_num 
    FROM Orders 
   ORDER BY cust_id, order_num;

#3번. 
  SELECT * 
    FROM OrderItems 
   ORDER BY quantity desc, item_price desc;

##/*********************2장 단순 SELECT 실습*********************/
#1번. Customers 테이블에서 모든 고객 ID(cust_id)를 가져오는 SQL문
  SELECT cust_id 
    FROM Customers;
#2번. OrderItems 테이블에는 주문 목록을 모두 저장(일부는 여러번 주문) 주문한 제품 목록(prod_id)를 가져오는 SQL문(고유한 제품 목록 7개의 행으로 표시
  SELECT DISTINCT prod_id
    FROM OrderItems;
#3번. Customers 테이블에서 모든 열을 가져오는 SQL문을 작성해 보고 고객ID만 가져오는 SELCT문도 작성, 한 문장을 주석 처리하여 하나만 실행
  SELECT * 
    FROM Customers;

/* SELECT CUST_ID
     FROM Customers;*/
